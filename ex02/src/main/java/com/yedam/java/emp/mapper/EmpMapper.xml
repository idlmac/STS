<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- nameSpace는 인터페이스의 이름 풀네임까지 -->
<mapper namespace="com.yedam.java.emp.mapper.EmpMapper">
	<!-- 하나의 태그가 하나의 메소드를 의미 -->
	<select id="getEmpList" resultType="EmpVO">
		select * from employees 
		<!-- <where>
			<if test="departmentId !=null">
				department_id = #{departmentId} AND
			</if>
			<if test="managerId != null">
				manager_id = #{managerId} AND
			</if>
			job_id = #{jobId}
		</where> -->
		
	</select>
	<select id="getEmp1" parameterType="EmpVO" resultType="EmpVO">
		<!-- ${}안의 필드명은 vo의 필드명과 같아야한다(같은 이름이어야 그 이름의 getter, setter를 mybatis가 
			들고올 수 있기 때문이다. -->
		<!-- resultType은 정해진 객체를 넘겨주는것 resultMap은 객체를 만드는 것 -->
		select employee_id, first_name, <if test="!employeeId.equals('100')">email,</if> hire_date, job_id, salary from employees where employee_id = #{employeeId}
	</select>
	<select id="getEmp" parameterType="EmpVO" resultType="EmpVO">
		select * from employees where employee_id = #{employeeId}
	</select>
	<!-- insert,update -->
	<!-- selectKey는 insert와 update안에서만 동작한다. -->
	<!-- selectKey : insert, update전에 먼저 select로 확인하고자 할떄 사용한다. -->
	<!-- order : insert,update 전에할건지(before), 후에할건지(after)결정할 수 있다. 주로 전에 pk확인할 
		떄 사용한다. -->
<!--
	SELECT * FROM empleoyee_id WHERE email = #{email} or first_name =
	#{firstName} or last_name = #{lastName}
	 -->
	<insert id="insertEmp" parameterType="EmpVO">
		<selectKey keyProperty="employeeId" order="BEFORE"
			resultType="String">
			SELECT MAX(employee_id) + 1 FROM employees
		</selectKey>
		INSERT INTO employees (employee_id, first_name, last_name, email,
		hire_date, job_id, salary)
		VALUES (#{employeeId}, #{firstName},
		#{lastName}, #{email}, sysdate, #{jobId}, #{salary})
	</insert>
	<update id="updateSalary" parameterType="Integer">
		UPDATE employees SET
		salary = salary * 1.1 WHERE employee_id = #{empId}
	</update>
	<update id="updateEmp" parameterType="EmpVO">
		UPDATE employees
		<!--SET first_name = #{firstName}, last_name = #{lastName}, email = #{email} 
			WHERE employee_id = #{employeeId} -->
		<set>
			<if test="firstName != null and !firstName.equals('')">first_name = #{firstName}, </if>
			<if test="lastName != null and !lastName.equals('')">last_name = #{lastName}, </if>
			<if test="email != null and !email.equals('')">email = #{email}</if>
		</set>
		WHERE employee_id = #{employeeId}
	</update>
	<delete id="deleteEmp" parameterType="Integer">
		DELETE FROM employees WHERE
		employee_id = #{employeeId}
	</delete>
</mapper>